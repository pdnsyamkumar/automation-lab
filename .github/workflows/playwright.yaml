name: 'Playwright Tests'
on:
  workflow_dispatch:
    inputs:
      browser:
        description: 'Browser to run tests in'
        required: true
        default: 'chromium'
        type: choice
        options:
          - chromium
          - firefox
          - webkit
          - chrome
          - msedge
          - safari
      shards:
        description: 'Number of shards to run'
        required: true
        default: '1'
      retries:
        description: 'Number of retries for failed tests'
        required: true
        default: '0'
      workers:
        description: 'Number of workers to run in parallel'
        required: true
        default: '1'
      tags:
        description: 'Tags to filter tests. Supports: comma-separated (OR, e.g. @smoke,@regression), ampersand-separated (AND, e.g. @smoke&@regression), and ! for invert (e.g. !@wip)'
        required: false
        default: ''
        type: string

env:
  BASE_URL: 'https://automationexercise.com'

jobs:
  setup-environment:
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.40.0-focal
    outputs:
      matrix: ${{ steps.create-matrix.outputs.matrix }}
      grep-arg: ${{ steps.prepare-grep.outputs.grep-arg }}
      grep-invert-arg: ${{ steps.prepare-grep.outputs.grep-invert-arg }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup node, npm and cache
        uses: './.github/actions/setup-npm'

      - name: Set environment variables
        run: |
          {
            echo "BROWSER=${{ github.event.inputs.browser }}"
            echo "SHARDS=${{ github.event.inputs.shards }}"
            echo "RETRIES=${{ github.event.inputs.retries }}"
            echo "WORKERS=${{ github.event.inputs.workers }}"
          } >> $GITHUB_ENV

      - name: Create test matrix
        id: create-matrix
        run: |
          echo "Creating matrix..."
          shards=${{ github.event.inputs.shards }}
          if [ -z "$shards" ]; then
            shards=1
          fi
          shardArray=$(seq -s, 1 $shards | sed 's/,/","/g')
          matrix=$(echo "{\"shard\": [\"$shardArray\"], \"total_shards\": [\"$shards\"]}")
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

      - name: Install Browsers
        uses: ./.github/actions/install-browser
        with:
          browser: ${{ github.event.inputs.browser }}

      - name: Prepare grep arguments
        id: prepare-grep
        shell: bash
        run: |
          tags="${{ github.event.inputs.tags }}"
          grep_arg=""
          grep_invert_arg=""
          if [[ -n "$tags" ]]; then
            # Handle invert (starts with !)
            if [[ "$tags" == !* ]]; then
              tags="${tags//!/}" # Remove all '!'
              tags="${tags//,/|}" # OR logic for invert
              grep_invert_arg="--grep-invert \"$tags\""
            # Handle AND (contains &)
            elif [[ "$tags" == *"&"* ]]; then
              tags_arr=(${tags//&/ })
              regex="(?=.*${tags_arr[0]})"
              for tag in "${tags_arr[@]:1}"; do
                regex="${regex}(?=.*${tag})"
              done
              grep_arg="--grep \"$regex\""
            # Handle OR (comma separated)
            elif [[ "$tags" == *,* ]]; then
              tags="${tags//,/|}"
              grep_arg="--grep \"$tags\""
            # Single tag
            else
              grep_arg="--grep \"$tags\""
            fi
          fi
          echo "grep-arg=$grep_arg" >> $GITHUB_OUTPUT
          echo "grep-invert-arg=$grep_invert_arg" >> $GITHUB_OUTPUT

  run-tests:
    needs: setup-environment
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.40.0-focal
    strategy:
      matrix: ${{ fromJson(needs.setup-environment.outputs.matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup node, npm and cache
        uses: './.github/actions/setup-npm'

      - name: Install Browsers
        uses: ./.github/actions/install-browser
        with:
          browser: ${{ github.event.inputs.browser }}
      
      - name: Print the User inputs
        run: |
          echo "Running tests with the following parameters:"
          echo "Browser: ${{ github.event.inputs.browser }}"
          echo "Shards: ${{ matrix.total_shards }}"
          echo "Shard: ${{ matrix.shard }}"
          echo "Retries: ${{ github.event.inputs.retries }}"
          echo "Workers: ${{ github.event.inputs.workers }}"
          echo "Tags: ${{ github.event.inputs.tags }}"

      - name: Run Playwright tests
        run: |
          npx playwright test \
            --config=playwright/playwright.config.ts \
            --shard=${{ matrix.shard }}/${{ matrix.total_shards }} \
            --project=tests \
            --workers=${{ github.event.inputs.workers }} \
            --retries=${{ github.event.inputs.retries }} \
            ${{ needs.setup-environment.outputs.grep-arg }} ${{ needs.setup-environment.outputs.grep-invert-arg }} \
            --reporter=blob \

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: blob-report-${{ matrix.shard }}
          path: blob-report/
          retention-days: 7

  merge-reports:
    if: always()
    needs: run-tests
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.40.0-focal
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup node, npm and cache
        uses: './.github/actions/setup-npm'

      - name: Download all test reports
        uses: actions/download-artifact@v4
        with:
          path: all-blob-reports
          pattern: blob-report-*
          merge-multiple: true

      - name: Merge into HTML Report
        run: npx playwright merge-reports --reporter html ./all-blob-reports

      - name: Upload HTML report
        uses: actions/upload-artifact@v4
        with:
          name: playwright-merged-report
          path: playwright-report
          retention-days: 7
